#!/bin/bash
# vim: ft=bash

api_cfg="${HOME}/.config/eww/main/scripts/weather-settings"
cache_dir="/tmp/eww-weather"
cache_last_get="${cache_dir}/last-get"
lock_file="${cache_dir}/lock"
cache_weather_icon="${cache_dir}/weather-icon"
cache_weather_degree="${cache_dir}/weather-degree"
cache_weather_degree_feel="${cache_dir}/weather-degree-feel"
cache_weather_wind="${cache_dir}/weather-wind"
cache_weather_humidity="${cache_dir}/weather-humidity"
cache_weather_high="${cache_dir}/weather-high"
cache_weather_low="${cache_dir}/weather-low"

## Make cache dir
if [[ ! -d "${cache_dir}" ]]; then
	mkdir -p "${cache_dir}"
fi

get_last_time() {
    declare -i do_update=1
    if [[ -f "${cache_last_get}" ]]; then
        declare -i last_time=$(cat ${cache_last_get})

        # add 1 hour
        declare -i comp_time=$((last_time + 3600))
        declare -i current_time=$(date +%s)
        if [[ ! -f "${lock_file}" ]]; then
            # there are no other instances of this script running
            if [[ "${current_time}" -gt "${comp_time}" ]]; then
                # it's been 1 hour since data was last fetched from the API
                do_update=0
            fi
        fi
    else
        # file doesn't exist, so API likely hasn't been called yet
        do_update=0
    fi
    return ${do_update}
}

## Get data
update_weather_data() {
    get_last_time
    if [[ $? == 0 ]]; then
        touch "${lock_file}"

        ## get API settings
        if [[ -f "${api_cfg}" ]]; then
            source ${api_cfg}

            # API calls
            weather=$(curl -sf "https://api.pirateweather.net/forecast/${API_KEY}/${LAT},${LONG}?exclude=minutely,hourly,alerts&units=${UNITS}")
        fi

        if [ ! -z "$weather" ]; then
            # log last time API was called
            date +%s > ${cache_last_get}
            weather_temp=$(echo "${weather}" | jq -r ".currently.temperature|round")
            weather_icon_code=$(echo "${weather}" | jq -r ".currently.icon")
            weather_feel=$(echo "${weather}" | jq -r ".currently.apparentTemperature|round")
            weather_wind=$(echo "${weather}" | jq -r ".currently.windSpeed*10|round/10")
            weather_hum=$(echo "${weather}" | jq -r ".currently.humidity*10|round/10")
            weather_hi=$(echo "${weather}" | jq -r ".daily.data[0].temperatureMax*10|round/10")
            weather_lo=$(echo "${weather}" | jq -r ".daily.data[0].temperatureMin*10|round/10")
        else
            weather_temp="0"
            weather_icon_code="0"
            weather_feel="0"
            weather_wind="0"
            weather_hum="0"
            weather_hi="0"
            weather_lo="0"
            rm ${cache_last_get}
        fi
        echo "${weather_temp}" > ${cache_weather_degree}
        echo "${weather_feel}" > ${cache_weather_degree_feel}
        echo "${weather_wind}" > ${cache_weather_wind}
        echo "${weather_hum}" > ${cache_weather_humidity}

        if [[ "${weather_icon_code}" == "rain" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "snow" || "${weather_icon_code}" == "sleet" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "wind" || "${weather_icon_code}" == "fog" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "clear-day" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "clear-night" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "cloudy" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "partly-cloudy-day" ]]; then
            weather_icon=""
        elif [[ "${weather_icon_code}" == "partly-cloudy-night" ]]; then
            weather_icon=""
        else
            weather_icon=""
        fi
        echo "${weather_icon}" > ${cache_weather_icon}
        echo "${weather_hi}" > ${cache_weather_high}
        echo "${weather_lo}" > ${cache_weather_low}

        rm "${lock_file}"
    fi
}

## Options
update_weather_data
if [[ "$1" == "icon" ]]; then
    cat ${cache_weather_icon}
elif [[ "$1" == "temp" ]]; then
    cat ${cache_weather_degree}
elif [[ "$1" == "feels-like" ]]; then
    cat ${cache_weather_degree_feel}
elif [[ "$1" == "wind" ]]; then
    cat ${cache_weather_wind}
elif [[ "$1" == "humidity" ]]; then
    cat ${cache_weather_humidity}
elif [[ "$1" == "high" ]]; then
    cat ${cache_weather_high}
elif [[ "$1" == "low" ]]; then
    cat ${cache_weather_low}
fi
