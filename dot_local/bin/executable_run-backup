#!/bin/bash

# load the config boi
source ${HOME}/.config/restic-backup/backup.conf

commands=(init now trigger forget prune status logs snapshots restore check help)

run_restic() {
    export RESTIC_PASSWORD_COMMAND
    export RESTIC_READ_CONCURRENCY
    export RESTIC_PACK_SIZE
    export GOMAXPROCS
    (set -x; systemd-inhibit --who "restic-backup" --why "Active restic command executing" restic -v -r ${RESTIC_REPOSITORY_PATH} $@)
}

init() { # : Initialize restic repository
    run_restic init
}

uptime_check() {
    UPTIME=$(awk '{print int($1)}' /proc/uptime)

    echo "Waiting for system uptime to surpass ${DELAY_AFTER_BOOT}"
    while [[ $UPTIME -lt $DELAY_AFTER_BOOT ]]; do
        sleep 10
        UPTIME=$(awk '{print int($1)}' /proc/uptime)
        if [[ $UPTIME -gt $(($DELAY_AFTER_BOOT - 60)) ]]; then
            notify-send "Auto backup" "Running automated backup in 60 seconds..."
        fi
    done

    echo "System uptime threshold reached."
}

repo_check() {
    if [[ ! -d ${RESTIC_REPOSITORY_PATH} ]]; then
        echo "Restic repository unreachable: ${RESTIC_REPOSITORY_PATH}"
        echo "Repository unreachable" >> "${HOME}/restic-backup-failure-$(date)"
        notify-send -u critical "Backup failure" "Repository unreachable"
        exit 1
    fi
}

keepassxc_check() {
    if ! killall -q -0 keepassxc; then
        echo "KeePassXC unreachable"
        echo "KeePassXC unreachable" >> "${HOME}/restic-backup-failure-$(date)"
        notify-send -u critical "Backup failure" "KeePassXC unreachable"
        exit 1
    fi
}

now() { # : Run backup now
    if [[ -t 0 ]]; then
        trigger
    else
        uptime_check
        repo_check
        keepassxc_check
        if run_restic backup --no-scan --tag ${BACKUP_TAG} ${RESTIC_BACKUP_PATHS[@]}; then
            notify-send "Auto backup" "Backup completed successfully"
            echo "Restic backup completed successfully."
        else
            echo "Restic backup failed!"

            # I don't have a better notification system than this for now
            touch "${HOME}/restic-backup-failure-$(date)"
            notify-send -u critical "Backup failure" "Automated restic backup failed at $(date)"
            exit 1
        fi
    fi
}

trigger() { # : Run backup now, by triggering the systemd service
    (set -x; systemctl --user start ${BACKUP_NAME}.service)
    echo "systemd is now running the backup job in the background. Check 'status' later."
}

prune() { # : Remove old snapshots from repository
    run_restic prune
}

forget() { # : Apply the configured data retention policy to the backend
    run_restic forget --tag ${BACKUP_TAG} --group-by "paths,tags" \
        --keep-last ${RETENTION_SNAPSHOTS}
}

snapshots() { # : List all snapshots
    run_restic snapshots
}

restore() { # [SNAPSHOT] : Restore data from snapshot (default 'latest')
    SNAPSHOT=${1:-latest}
    ROOT_PATH=${HOME}
    read -p "Are you sure you want to restore all data from snapshot '${SNAPSHOT}'? [y/N]" yes_no
    if [[ ${yes_no,,} == "y" ]] || [[ ${yes_no,,} == "yes" ]]; then
        run_restic restore -t ${ROOT_PATH} ${SNAPSHOT}
    else
        echo "Exiting."
        exit 1
    fi
}

check() { # : Deep verify of backup integrity
    repo_check
    keepassxc_check
    notify-send "Backup check" "Running backup integrity check"
    if ! run_restic check --read-data; then
        touch "${HOME}/restic-backup-integrity-failure-$(date)"
        notify-send -u critical "Backup failure" "Backup integrity may be compromised"
        exit 1
    fi
    notify-send "Backup check" "Integrity verified"
}

status() { # : Show the last and next backup times
    echo "Backup paths: (${RESTIC_BACKUP_PATHS[@]})"
    echo "Repository path: ${RESTIC_REPOSITORY_PATH}"
    journalctl --user --unit ${BACKUP_NAME} --since yesterday | \
        grep -E "(Restic backup completed successfully|Restic backup failed)" | \
        sort | awk '{ gsub("Restic backup finished successfully", "\033[1;33m&\033[0m"); gsub("Restic backup failed", "\033[1;31m&\033[0m"); print }'
    echo "Run the 'logs' subcommand for more information."
    (set -x; systemctl --user list-timers ${BACKUP_NAME} --no-pager)
    run_restic stats
}

logs() { # : Show recent service logs
    set -x
    journalctl --user --unit ${BACKUP_NAME} --since yesterday
}

help() { # : Show this help
    echo "## run-backup help:"
    echo -e "# subcommand [ARG1] [ARG2]\t#  Help Description" | expand -t35
    for cmd in "${commands[@]}"; do
        annotation=$(grep -E "^${cmd}\(\) { # " ${BASH_SOURCE} | sed "s/^${cmd}() { # \(.*\)/\1/")
        args=$(echo ${annotation} | cut -d ":" -f1)
        description=$(echo ${annotation} | cut -d ":" -f2)
        echo -e "${cmd} ${args}\t# ${description} " | expand -t35
    done
}

main() {
    if ! which restic >/dev/null; then
        echo "restic must be installed."
        exit 1
    fi

    if test $# = 0; then
        help
    else
        CMD=$1; shift;
        if [[ " ${commands[*]} " =~ " ${CMD} " ]]; then
            ${CMD} $@
        else
            echo "Unknown command: ${CMD}"
            exit 1
        fi
    fi
}
main $@
